{"version":3,"sources":["Components/GlobalStyles.js","Components/GithubIcon.js","Components/ToggleBtn.js","Components/Header.js","util/styles.js","Components/Error.js","Components/Percentage.js","Components/Shade.js","Components/Tint.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","Link","styled","a","Icon","AiFillGithub","GithubIcon","href","target","Btn","button","Indicator","span","ToggleBtn","setTheme","onClick","Container","header","Title","h1","Header","flexColumn","css","flexRow","Message","h3","ErrorComponent","div","Value","Percentage","weight","BgColor","bgColor","HexValue","Clipboard","MdContentCopy","Shade","shade","hex","useState","showClipboard","setShowClipboard","onMouseOver","onMouseLeave","navigator","clipboard","writeText","Tint","tint","AppContainer","main","Form","form","Label","label","Input","input","BtnContainer","Result","section","PercentageList","ShadeList","TintList","App","error","setError","shades","setShades","tints","setTints","setInput","submitColor","e","preventDefault","colors","Values","all","sort","b","filter","colorObj","type","console","log","inputRef","useRef","useEffect","current","focus","timeOut","setTimeout","clearTimeout","onSubmit","ref","placeholder","value","onChange","oldState","Error","length","map","element","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06a8521b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n    *{\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        font-weight: 300;\n}\nbody{\n        font-family: 'Ubuntu', sans-serif;\n        button, svg{\n                cursor: pointer;\n        }\n        font-weight: 300;\n       background-color: var(--white);\n       color: var(--black)\n}\n\n:root{\n        --white: ${({ theme }) => (theme === \"white\" ? \"white\" : \"black\")};\n        --black: ${({ theme }) => (theme === \"white\" ? \"black\" : \"white\")}; \n}\n`;\n\nexport default GlobalStyles;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { AiFillGithub } from \"react-icons/ai\";\n\nconst GithubIcon = () => {\n    return (\n        <>\n            <Link\n                href=\"https://github.com/vicky-yadav/tints-and-shades-generator\"\n                target=\"_blank\"\n            >\n                <Icon />\n            </Link>\n        </>\n    );\n};\n\nconst Link = styled.a``;\n\nconst Icon = styled(AiFillGithub)`\n    font-size: 1.6rem;\n    color: var(--white);\n    background-color: var(--black);\n    border-radius: 50%;\n    @media (min-width: 620px) {\n        font-size: 2rem;\n    }\n`;\n\nexport default GithubIcon;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ToggleBtn = ({ setTheme, theme }) => {\n    const changeTheme = () => {\n        if (theme === \"white\") {\n            setTheme(\"black\");\n        } else {\n            setTheme(\"white\");\n        }\n    };\n    return (\n        <>\n            <Btn onClick={changeTheme} theme={theme}>\n                <Indicator></Indicator>\n            </Btn>\n        </>\n    );\n};\n\nconst Btn = styled.button`\n    height: 1.4rem;\n    width: 2.6rem;\n    border-radius: 2rem;\n    background-color: var(--black);\n    display: flex;\n    align-items: center;\n    padding: 5px;\n    justify-content: ${({ theme }) =>\n        theme === \"white\" ? \"flex-end\" : \"flex: start\"};\n    border: 2px solid var(--black);\n    outline: none;\n    @media (min-width: 620px) {\n        height: 1.6rem;\n        width: 3rem;\n    }\n`;\n\nconst Indicator = styled.span`\n    background-color: var(--white);\n    display: inline-block;\n    border-radius: 50%;\n    width: 1rem;\n    height: 15px;\n`;\n\nexport default ToggleBtn;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport GithubIcon from \"./GithubIcon\";\nimport ToggleBtn from \"./ToggleBtn\";\n\nconst Header = ({ setTheme, theme }) => {\n    return (\n        <>\n            <Container>\n                <GithubIcon />\n                <Title>Generate Color</Title>\n                <ToggleBtn setTheme={setTheme} theme={theme} />\n            </Container>\n        </>\n    );\n};\n\nconst Container = styled.header`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst Title = styled.h1`\n    font-weight: 500;\n    font-size: 1.5rem;\n    @media (min-width: 620px) {\n        font-size: 2rem;\n    }\n`;\n\nexport default Header;\n","import { css } from \"styled-components\";\n\nexport const flexColumn = css`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const flexRow = css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ErrorComponent = () => {\n    return (\n        <>\n            <Message>Please enter valid hex code</Message>\n        </>\n    );\n};\n\nconst Message = styled.h3`\n    color: red;\n`;\n\nexport default ErrorComponent;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Percentage = ({ weight }) => {\n    return (\n        <>\n            <Container>\n                <Value>{weight}</Value>\n            </Container>\n        </>\n    );\n};\n\nconst Container = styled.div`\n    height: 122px;\n`;\n\nconst Value = styled.h3`\n    padding: 0;\n`;\n\nexport default Percentage;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { MdContentCopy } from \"react-icons/md\";\nimport { flexRow } from \"../util/styles\";\n\nconst Shade = ({ shade }) => {\n    const { hex, weight } = shade;\n    const [showClipboard, setShowClipboard] = useState(false);\n\n    return (\n        <>\n            <Container>\n                <BgColor\n                    flexRow={flexRow}\n                    bgColor={hex}\n                    onMouseOver={() => {\n                        setShowClipboard(true);\n                    }}\n                    onMouseLeave={() => {\n                        setShowClipboard(false);\n                    }}\n                    onClick={() => {\n                        navigator.clipboard.writeText(`#${hex}`);\n                    }}\n                >\n                    {showClipboard && <Clipboard />}\n                </BgColor>\n                <HexValue>{`#${hex}`}</HexValue>\n            </Container>\n        </>\n    );\n};\n\nconst Container = styled.div`\n    position: relative;\n`;\n\nconst BgColor = styled.div`\n    height: 6rem;\n    width: 6rem;\n    background-color: #${({ bgColor }) => bgColor};\n    ${({ flexRow }) => flexRow}\n    border-radius: 1rem;\n`;\n\nconst HexValue = styled.h3`\n    text-align: center;\n`;\n\nconst Clipboard = styled(MdContentCopy)`\n    background-color: var(--white);\n    font-size: 1.7rem;\n    width: 2rem;\n    height: 2rem;\n    padding: 0.2rem;\n    border-radius: 8px;\n    color: var(--black);\n`;\n\nexport default Shade;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { MdContentCopy } from \"react-icons/md\";\nimport { flexRow } from \"../util/styles\";\n\nconst Tint = ({ tint }) => {\n    const { hex, weight } = tint;\n    const [showClipboard, setShowClipboard] = useState(false);\n\n    return (\n        <>\n            <Container>\n                <BgColor\n                    flexRow={flexRow}\n                    bgColor={hex}\n                    onMouseOver={() => {\n                        setShowClipboard(true);\n                    }}\n                    onMouseLeave={() => {\n                        setShowClipboard(false);\n                    }}\n                    onClick={() => {\n                        navigator.clipboard.writeText(`#${hex}`);\n                    }}\n                >\n                    {showClipboard && <Clipboard />}\n                </BgColor>\n                <HexValue>{`#${hex}`}</HexValue>\n            </Container>\n        </>\n    );\n};\n\nconst Container = styled.div`\n    position: relative;\n`;\n\nconst BgColor = styled.div`\n    height: 6rem;\n    width: 6rem;\n    background-color: #${({ bgColor }) => bgColor};\n    ${({ flexRow }) => flexRow}\n    border-radius: 1rem;\n`;\n\nconst HexValue = styled.h3`\n    text-align: center;\n`;\n\nconst Clipboard = styled(MdContentCopy)`\n    background-color: var(--white);\n    font-size: 1.7rem;\n    width: 2rem;\n    height: 2rem;\n    padding: 0.2rem;\n    border-radius: 8px;\n    color: var(--black);\n`;\n\nexport default Tint;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport GlobalStyles from \"./Components/GlobalStyles\";\nimport Values from \"values.js\";\nimport Header from \"./Components/Header\";\nimport styled from \"styled-components\";\nimport { flexColumn, flexRow } from \"./util/styles\";\nimport ErrorComponent from \"./Components/Error\";\n\nimport Percentage from \"./Components/Percentage\";\nimport Shade from \"./Components/Shade\";\nimport Tint from \"./Components/Tint\";\n\nconst App = () => {\n    const [error, setError] = useState(false);\n    const [shades, setShades] = useState([]);\n    const [tints, setTints] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const [theme, setTheme] = useState(\"black\");\n\n    const submitColor = (e) => {\n        e.preventDefault();\n        setError(false);\n        try {\n            const data = new Values(input).all(5);\n            const colors = data.sort((a, b) => a.weight - b.weight);\n            setShades(colors.filter((colorObj) => colorObj.type === \"shade\"));\n            setTints(colors.filter((colorObj) => colorObj.type === \"tint\"));\n        } catch (error) {\n            setError(true);\n            console.log(error);\n        }\n    };\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n    }, []);\n\n    useEffect(() => {\n        const timeOut = setTimeout(() => {\n            if (error) {\n                setError(false);\n            }\n        }, 2500);\n        return () => {\n            clearTimeout(timeOut);\n        };\n    }, [error]);\n\n    return (\n        <>\n            <GlobalStyles theme={theme} />\n            <AppContainer flexColumn={flexColumn}>\n                <Header setTheme={setTheme} theme={theme} />\n                <Form\n                    flexColumn={flexColumn}\n                    onSubmit={(e) => {\n                        e.preventDefault();\n                        submitColor(e);\n                    }}\n                >\n                    <Label>Enter color here</Label>\n                    <Input\n                        ref={inputRef}\n                        placeholder=\"#222222\"\n                        type=\"text\"\n                        value={input}\n                        onChange={(e) => {\n                            setInput((oldState) => e.target.value);\n                        }}\n                    ></Input>\n                    <BtnContainer\n                        onClick={(e) => {\n                            submitColor(e);\n                        }}\n                    >\n                        <Btn type=\"submit\">Get Colors</Btn>\n                    </BtnContainer>\n                </Form>\n\n                {error ? <ErrorComponent /> : null}\n                {tints.length !== 0 && (\n                    <Result flexRow={flexRow}>\n                        <PercentageList flexColumn={flexColumn}>\n                            <Title>%</Title>\n                            {shades.map((element, index) => {\n                                return <Percentage key={index} {...element} />;\n                            })}\n                        </PercentageList>\n                        <ShadeList flexColumn={flexColumn}>\n                            <Title>Shade</Title>\n                            {shades.map((shade, index) => {\n                                return <Shade key={index} shade={shade} />;\n                            })}\n                        </ShadeList>\n                        <TintList flexColumn={flexColumn}>\n                            <Title>Tint</Title>\n                            {tints.map((tint, index) => {\n                                return <Tint key={index} tint={tint} />;\n                            })}\n                        </TintList>\n                    </Result>\n                )}\n            </AppContainer>\n        </>\n    );\n};\n\nconst AppContainer = styled.main`\n    ${({ flexColumn }) => flexColumn}\n    padding: 1rem;\n    height: 100%;\n`;\n\nconst Form = styled.form`\n    ${({ flexColumn }) => flexColumn}\n    & * {\n        margin: 0.4rem;\n    }\n`;\n\nconst Label = styled.label``;\n\nconst Input = styled.input`\n    border: none;\n    border-bottom: 2px solid var(--black);\n    outline: none;\n    padding: 0.5rem 1.3rem;\n    text-align: center;\n    background-color: var(--white);\n    color: var(--black);\n    /* ::placeholder {\n        color: var(--black);\n    } */\n`;\n\nconst BtnContainer = styled.div``;\n\nconst Btn = styled.button`\n    width: 10rem;\n    padding: 0.2rem 0;\n    border: 2px solid var(--black);\n    outline: none;\n    background-color: var(--white);\n    border-radius: 1rem;\n    font-size: 1rem;\n    cursor: pointer;\n    color: inherit;\n    &:hover {\n        background-color: var(--black);\n        color: var(--white);\n    }\n`;\n\nconst Result = styled.section`\n    ${({ flexRow }) => flexRow}\n    justify-content: space-around;\n    width: 100%;\n    align-items: flex-start;\n`;\nconst Title = styled.h3`\n    text-align: center;\n`;\n\nconst PercentageList = styled.section`\n    width: 33%;\n    ${({ flexColumn }) => flexColumn}\n`;\n\nconst ShadeList = styled.section`\n    width: 33%;\n    ${({ flexColumn }) => flexColumn}\n`;\n\nconst TintList = styled.section`\n    width: 33%;\n    ${({ flexColumn }) => flexColumn}\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}